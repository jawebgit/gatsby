// Generated by CoffeeScript 1.9.0
(function() {
  var frontMatter, fs, glob, parsePath, path, _;

  glob = require('glob');

  path = require('path');

  parsePath = require('parse-filepath');

  fs = require('fs');

  frontMatter = require('front-matter');

  _ = require('underscore');

  module.exports = function(directory, callback) {
    var pagesData;
    pagesData = [];
    return glob(directory + '/pages/**/?(*.coffee|*.cjsx|*.jsx|*.md|*.html)', null, (function(_this) {
      return function(err, pages) {
        var data, ext, page, pageData, parsed, rawData, relativePath, _i, _len;
        if (err) {
          return callback(err);
        }
        for (_i = 0, _len = pages.length; _i < _len; _i++) {
          page = pages[_i];
          if (page.indexOf('/pages/app') > -1) {
            continue;
          }
          pageData = {};
          parsed = parsePath(path.relative(directory + "/pages", page));
          pageData.ext = ext = parsed.extname.slice(1);
          relativePath = path.relative(directory, page);
          pageData.requirePath = path.relative(directory + "/pages", page);
          if (ext === "md") {
            rawData = frontMatter(fs.readFileSync(page, 'utf-8'));
            data = _.extend({}, rawData.attributes);
            pageData.data = data;
          } else {
            data = {};
          }
          if (data.path) {
            pageData.path = data.path;
          } else {
            if (parsed.name === "index") {
              if (parsed.dirname === ".") {
                pageData.path = "/";
              } else {
                pageData.path = "/" + parsed.dirname + "/";
              }
            } else {
              if (parsed.dirname === ".") {
                pageData.path = "/" + parsed.name + ".html";
              } else {
                pageData.path = "/" + parsed.dirname + "/" + parsed.name + ".html";
              }
            }
          }
          pagesData.push(pageData);
        }
        return callback(null, pagesData);
      };
    })(this));
  };

}).call(this);
