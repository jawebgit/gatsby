// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`build and update individual types applies automatic extensions to inferred fields 1`] = `
"type NewType implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  date(
    \\"\\"\\"
    Format the date using Moment.js' date tokens, e.g. \`date(formatString: \\"YYYY
    MMMM DD\\")\`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    \\"\\"\\"
    formatString: String

    \\"\\"\\"Returns a string generated with Moment.js' \`fromNow\` function\\"\\"\\"
    fromNow: Boolean

    \\"\\"\\"
    Returns the difference between this date and the current time. Defaults to
    \\"milliseconds\\" but you can also pass in as the measurement \\"years\\",
    \\"months\\", \\"weeks\\", \\"days\\", \\"hours\\", \\"minutes\\", and \\"seconds\\".
    \\"\\"\\"
    difference: String

    \\"\\"\\"Configures the locale Moment.js will use to format the date.\\"\\"\\"
    locale: String
  ): Date
  nested: NewTypeNested
}"
`;

exports[`build and update individual types applies automatic extensions to inferred fields 2`] = `
"type NewTypeNested {
  date(
    \\"\\"\\"
    Format the date using Moment.js' date tokens, e.g. \`date(formatString: \\"YYYY
    MMMM DD\\")\`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    \\"\\"\\"
    formatString: String

    \\"\\"\\"Returns a string generated with Moment.js' \`fromNow\` function\\"\\"\\"
    fromNow: Boolean

    \\"\\"\\"
    Returns the difference between this date and the current time. Defaults to
    \\"milliseconds\\" but you can also pass in as the measurement \\"years\\",
    \\"months\\", \\"weeks\\", \\"days\\", \\"hours\\", \\"minutes\\", and \\"seconds\\".
    \\"\\"\\"
    difference: String

    \\"\\"\\"Configures the locale Moment.js will use to format the date.\\"\\"\\"
    locale: String
  ): Date
  nested: NewTypeNestedNested
}"
`;

exports[`build and update individual types applies automatic extensions to inferred fields 3`] = `
"type NewTypeNestedNested {
  date(
    \\"\\"\\"
    Format the date using Moment.js' date tokens, e.g. \`date(formatString: \\"YYYY
    MMMM DD\\")\`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    \\"\\"\\"
    formatString: String

    \\"\\"\\"Returns a string generated with Moment.js' \`fromNow\` function\\"\\"\\"
    fromNow: Boolean

    \\"\\"\\"
    Returns the difference between this date and the current time. Defaults to
    \\"milliseconds\\" but you can also pass in as the measurement \\"years\\",
    \\"months\\", \\"weeks\\", \\"days\\", \\"hours\\", \\"minutes\\", and \\"seconds\\".
    \\"\\"\\"
    difference: String

    \\"\\"\\"Configures the locale Moment.js will use to format the date.\\"\\"\\"
    locale: String
  ): Date
}"
`;

exports[`build and update individual types conflict reporting should remove conflicting fields and report about conflict 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "There are conflicting field types in your data.

If you have explicitly defined a type for those fields, you can safely ignore this warning message.
Otherwise, Gatsby will omit those fields from the GraphQL schema.

If you know all field types in advance, the best strategy is to explicitly define them with the \`createTypes\` action, and skip inference with the \`@dontInfer\` directive.
See https://www.gatsbyjs.org/docs/actions/#createTypes",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`build and update individual types conflict reporting should remove conflicting fields and report about conflict 3`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "Foo.numberKey:
 - type: number
   value: [33m1[39m
 - type: string
   value: [32m'string'[39m",
    ],
    Array [
      "Foo.dateKey:
 - type: date
   value: [32m'2018-05-05'[39m
 - type: object
   value: { nowItsObject: [33mtrue[39m }",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`build and update individual types creates derived types 8`] = `
"enum BarFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  fields___field1
}"
`;

exports[`rebuilds node types having existing relations rebuilds bi-directional relations 1`] = `
"type Foo implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  bar: Bar
  field1: Int
  field3: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds bi-directional relations 2`] = `
"type Bar implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  foo: Foo
  field2: Int
  field3: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds cyclic relations 1`] = `
"type Foo implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  bar: Bar
  field1: Int
  field4: Int
  field5: Int
  field6: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds cyclic relations 2`] = `
"type Bar implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  baz: Baz
  field2: Int
  field4: Int
  field5: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds cyclic relations 3`] = `
"type Baz implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  foo: Foo
  field3: Int
  field6: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds self-cyclic relations 1`] = `
"type Foo implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  foo: Foo
  field1: Int
  field2: Int
  field3: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds simple acyclic relations 1`] = `
"type Foo implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  foo: String
  field3: Int
  field4: Int
  field5: Int
  field6: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds simple acyclic relations 2`] = `
"type Bar implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  bar: Int
  field2: Int
  field4: Int
  field5: Int
}"
`;

exports[`rebuilds node types having existing relations rebuilds simple acyclic relations 3`] = `
"type Baz implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  baz: Int
  bar: Bar
  field1: Int
  field6: Int
}"
`;
